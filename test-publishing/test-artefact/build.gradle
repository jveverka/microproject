plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'one.microproject.test'
version = '1.0.2-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.30'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.slf4j:slf4j-simple:1.7.30'
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

artifacts {
    archives jar
    archives sourceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            groupId = 'one.microproject.test'
            artifactId = 'test-artefact'
            version = '1.0.2-SNAPSHOT'

            from components.java

            pom {
                name = 'microproject.one test artefact'
                description = 'A project used as an example on how to set up pushing its components to the Central Repository.'
                url = 'https://github.com/jveverka/microproject'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/jveverka/microproject/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'jveverka'
                        name = 'Juraj Veverka'
                        email = 'gergej123@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jveverka/microproject.git'
                    developerConnection = 'scm:git:https://github.com/jveverka/microproject.git'
                    url = 'https://github.com/jveverka/microproject.git'
                }
            }
        }
    }
    repositories {
        maven {
            //url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            url "https://oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

/*
def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A project used as an example on how to set up pushing its components to the Central Repository.'
            name 'microproject.one test artefact'
            url 'https://github.com/jveverka/microproject'
            organization {
                name 'one.microproject.test'
                url 'https://github.com/jveverka/microproject'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/jveverka/microproject/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/jveverka/microproject/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                connection = 'scm:git:https://github.com/jveverka/microproject.git'
                developerConnection = 'scm:git:https://github.com/jveverka/microproject.git'
                url = 'https://github.com/jveverka/microproject.git'
            }
            developers {
                developer {
                    name 'jveverka'
                }
            }
        }
    }
}

pom.withXml {
    def pomFile = file("${project.buildDir}/generated-pom.xml")
    writeTo(pomFile)
    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
    artifact(pomAscFile) {
        classifier = null
        extension = 'pom.asc'
    }
}
// create the signed artifacts
project.tasks.signArchives.signatureFiles.each {
    artifact(it) {
        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
        if (matcher.find()) {
            classifier = matcher.group(1)
        } else {
            classifier = null
        }
        extension = 'jar.asc'
    }
}
*/

signing {
    sign configurations.archives
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
